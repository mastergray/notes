Notes taken from
"Functional Programming in JavaScript" (by Dan Mantyla)
"Functional Programming in JavaScript: How to improve your JavaScript programs using functional techniques" (by Luis Atencio)
"Professor Frisby's Mostly Adequate Guide To Functional Programming" (https://www.gitbook.com/book/drboolean/mostly-adequate-guide/details)

- Categories are just sets with the same type. In JavaScript, they're arrays or objects that contain variables that are explicitly declared as numbers, strings, Booleans, dates, nodes, and so on.

- Morphisms are pure functions that, when given a specific set of inputs, always return the same output.

- Homomorphic operations are restricted to a single category, while polymorphic operations can operate on multiple categories. For example, the homomorphic function multiplication only works on numbers, but the polymorphic function addition can work on strings too.

- Category theory tells us that, when we have two morphisms where the category of the first one is the expected input of the other, then they can be composed (f: a -> b -> c)

- Categories contain two things:
	1. Objects (in JavaScript, types).
	2. Morphisms (in JavaScript, pure functions that only work on types).

- Objects in category theory are more like variables with an explicit data type and not collections of properties and values like in the JavaScript definition of objects.

- Using category theory in JavaScript means working with one certain data type per category. Data types are numbers, strings, arrays, dates, objects, Booleans, and so on.

- However, with no strict type system in JavaScript, things can go awry. So we'll have to implement our own method of ensuring that the data is correct.

- There are four primitive data types in JavaScript: numbers, strings, Booleans, and functions. We can create type safety functions that either return the variable or throw an error. (This fulfils the object axiom of categories.)

- Everything that is not a primitive—numbers, strings, Booleans, and functions—is an object, including arrays, dates, elements, and more.

- While morphisms are mappings between types, functors are mappings between categories. They can be thought of as functions that lift values out of a container, morph them, and then put them into a new container. The first input is a morphism for the type and the second input is the container. (f: (a -> b) -> f(a) -> f(b) which means “give me a function that takes a and returns b and a box that contains a(s), and I'll return a box that contains b(s).”)

-Is there an easier way to create functors that are already assigned to a morphism? Yes, and it's called arrayOf. When you pass in a morphism that expects an integer and returns an array, you get back a morphism that expects an array of integers and returns an array of arrays. (arrayOf :: (a -> b) -> ([a] -> [b]))

- Functions are another type of primitive that we can create a functor for. And that functor is called fcompose. We defined functors as something that takes a value from a container and applies a function to it. When that container is a function, we just call it to get its inner value.

-Function compositions are associative but not communitive. ((a x b) x c = a x (b x c) —-> (f o g) o h = g o (f o h), but f o g != g o f)

// Function compisition for multiple inputs
var fcompose = function() {
  // first make sure all arguments are functions
  var funcs = arrayOf(func)(arguments);

  // return a function that applies all the functions
  return function() {
    var argsOfFuncs = arguments;
    for (var i = funcs.length; i > 0; i -= 1) {
      argsOfFuncs  = [funcs[i].apply(this, args)];
    }
    return args[0];
  };
};

// example:
var f = fcompose(negate, square, mult2, add1);
f(2); // Returns: -36


-Monads are tools that help you compose functions.

-Like primitive types, monads are structures that can be used as the containers that functors "reach into". The functors grab the data, do something to it, put it into a new monad, and return it.

-A Maybe monad allows us to gracefully work with data that might be null and to have defaults. A maybe is a variable that either has some value or it doesn't. And it doesn't matter to the caller.

-Lenses monads are first-class getters and setters. They allow us to not just get and set variables, but also to run functions over it. But instead of mutating the data, they clone and return the new data modified by the function. They force data to be immutable, which is great for security and consistency as well for libraries. They're great for elegant code no matter what the application, so long as the performance-hit of introducing additional array copies is not a critical issue.

-A “wrapper” or “container” is a simple type that stores a single value of any type.

-You can use a wrapper object to encapsulate a potentially erroneous value. Because you won’t have direct access to it, the only way to extract it is to use the identity function

-In essence, a functor is nothing more than a data structure that you can map functions over with the purpose of lifting values into a wrapper, modifying them, and then putting them back into a wrapper. (fmap :: (a -> b) -> Wrapper(a) -> Wrapper(b) means “The function fmap takes a function (from A -> B) and a functor (wrapped context) Wrapper(A) and returns a new functor Wrapper(B) containing the result of applying said function to the value and closing it once more. “)

because fmap basically returns a new copy of the container at each invocation, it can be considered immutable.

Functors, like any other functional programming artifact, are governed by some important properties:
	1. They must be side effect–free. You can map the R.identity function to obtain the same value over a context. This proves functors are side effect–free and preserves the structure of the wrapped value.
	2. They must be composable. This property indicates that the composition of a function applied to fmap should be exactly the same as chaining fmap functions together

-Monads are the containers that functors “reach into.”

-Monadic types share a lot of the same principles as the Wrapper object you learned about at the beginning of the chapter. But every monad is different and, depending on its purpose, can define different semantics driving its behavior (that is, for how map or fmap should work). These types define what it means to chain operations or nest functions of that type together, yet all must abide by the following interface:

-Type constructor— Creates monadic types (similar to the Wrapper constructor).

-Unit function— Inserts a value of a certain type into a monadic structure (similar to the wrap and empty functions you saw earlier). When implemented in the monad, though, this function is called of.

-Bind function— Chains operations together (this is a functor’s fmap, also known as flatMap). From here on, I’ll use the name map, for short. By the way, this bind function has nothing to do with the function-binding concept of chapter 4.

-Join operation— Flattens layers of monadic structures into one. This is especially important when you’re composing multiple monad-returning functions.

-Currying is simple: You can call a function with fewer arguments than it expects. It returns a function that takes the remaining arguments.

-Type signatures describe the behavior of a function, expressed as a free theorem, using the “Hindley-Milner” system.

-In HM, functions are written as “a -> b” where “a” and “b” are variables for any type.

For example, the type signature “capitalize :: String -> String”, can be read as “a function from String to String” or a function that takes a string as input and returns a string as it’s output.