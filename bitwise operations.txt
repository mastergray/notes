List of bitwise operations taken from Chapter 2 of "Hacker's Delight" (by Henry S. Warren Jr.)
http://www.hackersdelight.org/basics2.pdf

x & (x – 1)

  -->  Turns off the rightmost 1-bit in a word (e.g., 01011000 ⇒ 01010000)

x | (x + 1)

  -->  Determines if an unsigned integer is a power of 2 or is 0 (e.g., 10100111 ⇒ 10101111)

x & (x + 1)

  -->  Turns off the trailing 1’s in a word, producing x if none (e.g., 10100111 ⇒ 10100000)

x | (x– 1)

  -->  Turns on the trailing 0’s in a word, producing x if none (e.g., 10101000 ⇒ 10101111)

¬x & (x + 1)

  --> Creates a word with a single 1-bit at the position of the rightmost 0-bit in x,
      producing 0 if none (e.g., 10100111 ⇒ 00001000)

¬x | (x – 1)

  --> Creates a word with a single 0-bit at the position of the rightmost 1-bit in x,
      producing all 1’s if none (e.g., 10101000 ⇒ 11110111)

~x & (x - 1) or ~(x | -x) or (x & -x) - 1

  --> Creates a word with 1’s at the positions of the trailing 0’s in x, and 0’s elsewhere,
      producing 0 if none (e.g., 01011000 ⇒ 00000111)

¬x | (x + 1)

  --> Creates a word with 0’s at the positions of the trailing 1’s in x, and 0’s elsewhere,
      producing all 1’s if none (e.g., 10100111 ⇒ 11111000)

x & (−x)

  --> Isolates the rightmost 1-bit, producing 0 if none (e.g., 01011000 ⇒ 00001000)

x ⊕ (x − 1)

  --> Creates a word with 1’s at the positions of the rightmost 1-bit and the trailing 0’s in x,
      producing all 1’s if no 1-bit, and the integer 1 if no trailing 0’s (e.g., 01011000 ⇒ 00001111)

x ⊕ (x + 1)

  --> Creates a word with 1’s at the positions of the rightmost 0-bit and the trailing 1’s in x,
      producing all 1’s if no 0-bit, and the integer 1 if no trailing 1’s (e.g., 01010111 ⇒ 00001111)

(((x | (x − 1)) + 1) & x) or ((x & −x) + x) & x

  --> Turns off the rightmost contiguous string of 1’s (e.g., 01011100 ⇒ 01000000)
